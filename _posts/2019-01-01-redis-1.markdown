---
layout: post
title: Redis의 개념
date: 2019-01-01 00:10:00:00 +0900
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: redis.png # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [redis]
---
## Redis의 정의
**레디스는 고성능 키-값 저장소로서 문자열, 리스트, 해시, 셋, 정렬 셋 형식의 데이터를 지원하는 NoSQL이다.**

<br/>

## 스케일 업 vs 스케일 아웃
스케일 업(Scale Up) : 단일 서버(하드웨어)의 성능을 증가시켜서 더 많은 요청을 처리하는 방법이다.
스케일 아웃(Scale Out) : 동일한 사양의 새로운 서버(하드웨어)를 추가하는 방법이다.  

<br/>
<br/>

![스케일]({{site.baseurl}}/assets/img/scale.png)  

<br/>
<br/>

스케일 업은 단일 하드웨어의 성능을 높이기 위하여 CPU, 메모리, 하드디스크를 업그레이드하거나 추가하는 것을 말한다.(상황에 따라 서버자체를 교체하기도 한다.)  
스케일 업의 명확한 한계는 하나의 장비에 설치 할 수 있는 CPU 및 메모리와 디스크의 수에 제한이 있다.  
또한, 소프트웨어 구조상 아무리 스케일 업을 한다고해도 하드웨어의 퍼포먼스의 물리적 한계까 존재한다.  
<br/>

### ※MySQL 성능 증가를 위한 스케일 업  
> MySQL 테스트 자료에 따르면 CPU 코어를 4개부터 증가시켜서 성능 테스트를 한 결과 16코어를 넘어간 순간부터는 성능 증가가 미미하다.  
> MySQL Connection 또한 16개(MySQL 5.6버전부터 32개)가 넘어가는 순간부터 성능 증가가 미미하다.  

<br/>

NoSQL은 처음부터 스케일 아웃을 염두에 두고 설계되었기 때문에 데이터 증거나 요청량이 증가하더라도 동일하거나 비슷한 사양의 새로운 하드웨어를 추가하면 대응이 가능하다.  
데이터가 적거나 또는 요청량이 적을 때는 RDBMS를 사용하더라도 서비스를 제공하는 데 문제가 없다.  
하지만 데이터 증가량을 측정하기 불가능하거나 서비스 요청량의 증가를ㅇ ㅖ측하기 어려운 상황에서는 NoSQL을 저장소로 사용하는 것이 현명한 성택일 것이다.

<br/>

## Redis의 특징
* 영속성을 지원하는 인메모리 데이터 저장소
* 읽기 성능 증대를 위한 서버 측 복제를 지원
* 쓰기 성능 증대를 위한 클리이언트 측 샤딩(Sharding)을 지원
* ANSI C로 작성되어 있기 때문에 ANSI C 컴파일러가 작동하는 어느 곳이든 실행이 가능
* 레디스 클라이언트는 대부분의 언어로 포팅되어 있다.(참조:http://redis.io/clients)
* 문자열, 리스트, 해시 , 셋, 정렬된 셋과 같은 다양한 데이터형을 지원

<br/>

### 출처 및 참조
* 책 : 이것이 레디스다(출판사:한빛미디어)